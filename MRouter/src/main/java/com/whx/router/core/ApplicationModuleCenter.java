package com.whx.router.core;

import static com.whx.router.core.Constants.APPLICATION_MODULE_NAME_SUFFIX;
import static com.whx.router.core.Constants.APPLICATION_MODULE_PACKAGE;
import static com.whx.router.core.Constants.GOROUTER_SP_CACHE_KEY;
import static com.whx.router.core.Constants.GOROUTER_SP_KEY_APPLICATION_MODULE_MAP;

import android.app.Application;
import android.content.Context;
import android.content.res.Configuration;
import android.os.Process;

import androidx.annotation.NonNull;

import com.whx.router.exception.RouterException;
import com.whx.router.interfaces.IApplicationModule;
import com.whx.router.utils.ClassUtils;
import com.whx.router.utils.PackageUtils;
import com.whx.router.utils.TextUtils;
import com.whx.router.MRouter;
import com.whx.router.exception.RouterException;
import com.whx.router.interfaces.IApplicationModule;
import com.whx.router.utils.ClassUtils;
import com.whx.router.utils.PackageUtils;
import com.whx.router.utils.TextUtils;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;

public class ApplicationModuleCenter {
    private static final String TAG = MRouter.logger.getDefaultTag() + "_AM";

    private static ListComparator listComparator = new ListComparator();

    private static boolean registerByPlugin;

    /**
     * 获取Application module注册模式
     *
     * @return true [MRouter-Gradle-Plugin] ,false [scan dex file]
     */
    public static boolean isRegisterByPlugin() {
        return registerByPlugin;
    }

    public static synchronized void load(Application application) {
        loadByPlugin();
        if (registerByPlugin) {
            MRouter.logger.info(TAG, "Loading mode: Load module application by [MRouter-Gradle-Plugin] plugin.");
        } else {
            MRouter.logger.info(TAG, "Loading mode: The runtime loads the module application by scanning the dex file.");
            loadByDex(application);
        }

        if (Warehouse.applicationModules.size() == 0) {
            MRouter.logger.error(TAG, "No module application files were found, check your configuration please!");
        }

        if (MRouter.isDebug()) {
            MRouter.logger.debug(TAG, String.format(Locale.getDefault(), "Module application has already been loaded, ApplicationModuleIndex[%d]", Warehouse.applicationModules.size()));
        }
    }

    /**
     * MRouter-Gradle-Plugin plugin will generate code inside this method
     * call this method to register all module application
     */
    public static void loadByPlugin() {
        registerByPlugin = false;
        // auto generate register code by gradle plugin: MRouter-Gradle-Plugin
        // looks like below:
        // register("class name");
        // register("class name");
    }

    private static void register(String className) {
        register(className, true);
    }

    /**
     * register by class name
     * Sacrificing a bit of efficiency to solve
     * the problem that the main dex file size is too large
     */
    private static void register(String className, boolean isPlugin) {
        if (!TextUtils.isEmpty(className)) {
            try {
                Class<?> clazz = Class.forName(className);
                Object obj = clazz.getConstructor().newInstance();
                if (obj instanceof IApplicationModule) {
                    if (isPlugin) {
                        markRegisteredByPlugin();
                    }
                    register((IApplicationModule) obj);
                } else {
                    MRouter.logger.error(TAG,
                            "register failed, class name: " + className
                                    + " should implements one of IApplicationModule.");
                }
            } catch (RouterException e) {
                throw new RouterException("[register] " + e.getMessage());
            } catch (Exception e) {
                MRouter.logger.error(TAG, "register class error:" + className, e);
            }
        }
    }

    /**
     * mark already registered by MRouter-Gradle-Plugin plugin
     */
    private static void markRegisteredByPlugin() {
        if (!registerByPlugin) {
            registerByPlugin = true;
        }
    }

    private static void loadByDex(Application context) {
        try {
            long startTime = System.currentTimeMillis();
            Set<String> routeModuleMap;
            if (MRouter.isDebug() || PackageUtils.isNewVersion(context, GOROUTER_SP_CACHE_KEY)) {
                MRouter.logger.info(TAG, "Run with debug mode or new install, rebuild module application.");
                // These class was generated by MRouter-Compiler.
                routeModuleMap = ClassUtils.getFileNameByPackageName(context, APPLICATION_MODULE_PACKAGE, APPLICATION_MODULE_NAME_SUFFIX);
                if (!routeModuleMap.isEmpty()) {
                    context.getSharedPreferences(GOROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).edit().putStringSet(GOROUTER_SP_KEY_APPLICATION_MODULE_MAP, routeModuleMap).apply();
                }
                PackageUtils.updateVersion(context, GOROUTER_SP_CACHE_KEY);    // Save new version name when router map update finishes.
            } else {
                MRouter.logger.info(TAG, "Load module application from cache.");
                routeModuleMap = new HashSet<>(context.getSharedPreferences(GOROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).getStringSet(GOROUTER_SP_KEY_APPLICATION_MODULE_MAP, new HashSet<String>()));
            }

            MRouter.logger.info(TAG, "Find the module application loading class for " + routeModuleMap.size() + " modules, cost " + (System.currentTimeMillis() - startTime) + "ms.");
            startTime = System.currentTimeMillis();

            for (String className : routeModuleMap) {
                register(className, false);
            }

            MRouter.logger.info(TAG, "The loading module application is complete, cost " + (System.currentTimeMillis() - startTime) + "ms.");
        } catch (RouterException e) {
            throw new RouterException("[loadByDex] " + e.getMessage());
        } catch (Exception e) {
            throw new RouterException("AM [loadByDex] exception! [" + e.getMessage() + "]");
        }
    }

    private static void register(IApplicationModule am) {
        Warehouse.applicationModules.add(am);
    }

    /**
     * 动态注册使用
     *
     * @param am
     */
    public static void register(Class<? extends IApplicationModule> am) {
        try {
            register(am.getConstructor().newInstance());
        } catch (Exception e) {
            MRouter.logger.error(TAG, "register class error:" + e.getMessage());
            throw new RuntimeException(e);
        }
    }

    /**
     * The priority of interceptor, MRouter will be execute them follow the priority.
     * Execute from large to small
     */
    private static class ListComparator implements Comparator<IApplicationModule> {

        @Override
        public int compare(IApplicationModule o1, IApplicationModule o2) {
            return o2.setPriority() - o1.setPriority();
        }
    }

    private interface Consumer {
        void call(IApplicationModule ma);
    }

    private static void call(Consumer consumer) {
        if (Warehouse.applicationModules.isEmpty()) {
            return;
        }
        if (listComparator != null) {
            Collections.sort(Warehouse.applicationModules, listComparator);
            listComparator = null;
        }
        for (IApplicationModule am : Warehouse.applicationModules) {
            consumer.call(am);
        }
    }

    public static void callOnCreate(Application application) {
        load(application);
        call(am -> {
            am.onCreate(application);
            new Thread(() -> {
                // 设置线程的优先级，不与主线程抢资源
                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
                am.onLoadAsync(application);
            }).start();
        });
    }

    public static void callOnTerminate() {
        call(IApplicationModule::onTerminate);
    }

    public static void callOnConfigurationChanged(@NonNull Configuration newConfig) {
        call(ma -> ma.onConfigurationChanged(newConfig));
    }

    public static void callOnLowMemory() {
        call(IApplicationModule::onLowMemory);
    }

    public static void callOnTrimMemory(int level) {
        call(ma -> ma.onTrimMemory(level));
    }
}
